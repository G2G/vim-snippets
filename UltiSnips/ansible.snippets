snippet blockinfile
- name: ${1:task_description}
  blockinfile:
    path: ${2}
    insertafter: ${4:EOF}
    marker: ${5:# {mark} ANSIBLE MANAGED BLOCK}
    insertbefore: ${9:None}
    create: ${11:no}
    owner: ${14}
    state: ${15:present}
    mode: ${16:0644}
    block: ${19:""}
endsnippet

snippet command
- name: ${1:task_description}
  command: ${2}
    #chdir: ${3}
    #warn: ${4:yes}
    #creates: ${5}
    #removes: ${6}
    #stdin: ${7}
endsnippet

snippet copy
- name: ${1:task_description}
  copy:
    src: "{{ ${2:src_file} }}"
    dest: "{{ ${3:dst_file} }}"
    # force: ${4:yes}
    # mode: ${6:644}
    # owner: "{{ ${7:user} }}"
    # group: "{{ ${8:group} }}"
    # content: ${9:|}
    # backup: ${10:no}
    # remote_src: ${5:no}
    # validate: ${11:None}
    # directory_mode: ${12}
endsnippet

snippet file
- name: ${1:task_description}
  file:
    path: "{{ ${2:path} }}"
    # src: ${3}  # for link state
    owner: "{{ ${5:user} }}"
    group: "{{ ${6:group} }}"
    state: ${8:file} # cannot create file
    force: ${3:no} # for symlink
    # recurse: ${9:no}
    # mode: ${4:0644}
endsnippet

snippet find
- name: ${1:task_description}
  find:
    paths: ${2}
    # file_type: ${3:file}
    # age: ${4}
    # contains: ${5}
    # recurse: ${6:no}
    # age_stamp: ${7:mtime}
    # patterns: ${8:*}
    # get_checksum: ${9:no}
    # use_regex: ${10:no}
    # follow: ${11:no}
    # hidden: ${12:no}
    # size: ${13}
endsnippet

snippet get_url
- name: ${1:task_description}
  get_url:
    url: ${3}
    dest: ${2}
    # force: ${4:no}
    # timeout: ${5:10}
    # validate_certs: ${6:yes}
    # sha256sum: ${9}
    # owner: ${11}
    # group: ${14}
    # checksum: "{{ ${18} }}"
    mode: ${22:0644}
    tmp_dest: ${27:/tmp}
endsnippet

snippet include_role
- name: ${1:task_description}
  include_role:
    name: ${2}
    # allow_duplicates: ${3:True}
    # tasks_from: ${4:main}
    # vars_from: ${5:main}
    # defaults_from: ${6:main}
    # private: ${7:None}
endsnippet

snippet include_tasks
- name: ${1:task_description}
  include_tasks: ${2:task_name}.yml
endsnippet

snippet include_vars
- name: ${1:task_description}
  include_vars:
    # ignore_files: ${2}
    # free-form: ${3}
    # files_matching: ${4}
    # depth: ${5}
    # extensions: ${6:[u'yaml', u'yml', u'json']}
    # file: ${7}
    # dir: ${8}
    # name: ${9}
endsnippet

snippet ini_file
- name: ${1:task_description}
  ini_file:
    path: "{{ ${2:None} }}"
    section: ${3:None}
    option: ${4:option}
    value: "{{ ${5:value} }}"
    state: "{{ ${6:present}
    mode: ${7:0600}
    #owner: "{{ ${8:user} }}"
    #group: "{{ ${9:group} }}"
    #create: ${10:yes}
endsnippet

snippet lineinfile
- name: ${1:task_description}
  lineinfile:
    path: "{{ ${2:path} }}"
    owner: "{{ ${3:user} }}"
    create: ${4:no}
    state: ${5:present}
    mode: ${6:0644}
    # insertbefore: ${7:BOF}
    insertafter: ${8:EOF}
    regexp: ${9}
    # validate: ${10:None}
    line: ${11}
endsnippet

snippet molecule_platform
platforms:
  - name: centos6
    image: registry.gitlab.com/role_unit/role_unit_containers:centos6
    privileged: True
  - name: centos7
    image: registry.gitlab.com/role_unit/role_unit_containers:centos7
    privileged: True
    volume_mounts:
      - "/sys/fs/cgroup:/sys/fs/cgroup:ro"
    command: "/lib/systemd/systemd"
  - name: debian8
    image: registry.gitlab.com/role_unit/role_unit_containers:debian8
    privileged: True
    volume_mounts:
      - "/sys/fs/cgroup:/sys/fs/cgroup:ro"
    command: "/lib/systemd/systemd"
  - name: debian9
    image: registry.gitlab.com/role_unit/role_unit_containers:debian9
    privileged: True
    volume_mounts:
      - "/sys/fs/cgroup:/sys/fs/cgroup:ro"
    command: "/lib/systemd/systemd"
endsnippet

snippet package
- name: ${1:task_description}
  package:
    name: ${2:name}
    state: ${3:present}
endsnippet

snippet play
- hosts: ${1:hostgroup}
  become: ${2:yes}
  roles:
    - ${3}
  tasks:
endsnippet

snippet service
- name: ${1:task_description}
  service:
    name: ${2}
    enabled: ${5:yes}
    state: ${6:restarted}
    sleep: ${7:1}
endsnippet

snippet shell
- name: ${1:task_description}
  shell: ${2}
  args:
    # chdir: ${3}
    executable: ${5:/bin/bash}
    warn: ${6:no}
  changed_when: false
  # delegate_to: localhost
  register: ${7:shell_result}

- name: store ${8:shell_result} in variable
  set_fact:
    ${9:result}: "{{ ${10:shell_result}.stdout }}"

endsnippet

snippet stat
- name: ${1:task_description}
  stat:
    path: "{{ ${2:file} }}"
  ignore_errors: true
  register: ${3:file_stat}

- debug: msg="{{ ${4:file_stat} }}"
endsnippet

snippet synchronize
- name: ${1:task_description}
  synchronize:
    src: "{{ ${2:file} }}"
    dest: ${3:/tmp}
    mode: ${4:push}
    archive: ${5:yes}
    # delete: ${6:no}
    compress: ${7:yes}
    rsync_opts: ${8:"--exclude=.git"}
    existing_only: ${9:no}
    # dest_port: ${10:22}
    set_remote_user: ${12:False}
endsnippet

snippet systemd
- name: ${1:task_description}
  systemd:
    name: ${2}
    state: ${3:restarted}
    # user: no
    daemon_reload: ${4:yes}
    enabled: ${5:yes}
endsnippet

snippet template
- name: ${1:task_description}
  template:
    src: "{{ ${2:template} }}.j2"
    dest: "{{ ${3:path} }}"
    owner: "{{ ${4:user} }}"
    group: "{{ ${5:group} }}"
    force: ${6:yes}
    mode: ${7:0644}
    # validate: ${8:None}
endsnippet

snippet unarchive
- name: ${1:task_description}
  unarchive:
    src: "{{ ${2:file.tgz} }}"
    dest: "{{ ${3:dir} }}"
    remote_src: ${4:no}
    owner: "{{ ${5:user} }}"
    group: "{{ ${6:group} }}"
    keep_newer: ${7:no}
    # exclude: ${8}
    # extra_opts: ${9}
endsnippet

snippet user
- name: USER | creates if needs
  user:
    name: "{{ ${1:user} }}"
    home: "{{ ${2:home} }}"
    uid: ${3}
    state: ${4:present}
    shell: ${5:/bin/bash}
- name: USER | get user home directory
  shell: >
          awk -F: '/^'"{{ ${6:user} }}"':/{print \$6}' /etc/passwd
  changed_when: false
  register: home

- name: USER | store user home as variable
  set_fact:
    user_home: "{{ home.stdout }}"
endsnippet

snippet vars_os
- name: CFG | load specific OS vars
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution|lower }}.yml"
    - "{{ ansible_os_family|lower }}.yml"
    - "defaults.yml"
endsnippet

